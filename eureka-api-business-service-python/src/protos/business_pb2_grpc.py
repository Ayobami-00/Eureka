# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import business_pb2 as business__pb2


class BusinessServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchAll = channel.unary_unary(
                '/business.BusinessService/FetchAll',
                request_serializer=business__pb2.FetchAllBusinessRequest.SerializeToString,
                response_deserializer=business__pb2.FetchAllBusinessResponse.FromString,
                )
        self.Create = channel.unary_unary(
                '/business.BusinessService/Create',
                request_serializer=business__pb2.CreateBusinessRequest.SerializeToString,
                response_deserializer=business__pb2.CreateBusinessResponse.FromString,
                )
        self.FetchById = channel.unary_unary(
                '/business.BusinessService/FetchById',
                request_serializer=business__pb2.FetchBusinessByIdRequest.SerializeToString,
                response_deserializer=business__pb2.FetchBusinessByIdResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/business.BusinessService/Update',
                request_serializer=business__pb2.UpdateBusinessRequest.SerializeToString,
                response_deserializer=business__pb2.UpdateBusinessResponse.FromString,
                )
        self.DeleteById = channel.unary_unary(
                '/business.BusinessService/DeleteById',
                request_serializer=business__pb2.DeleteBusinessRequest.SerializeToString,
                response_deserializer=business__pb2.DeleteBusinessResponse.FromString,
                )


class BusinessServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FetchAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BusinessServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchAll': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchAll,
                    request_deserializer=business__pb2.FetchAllBusinessRequest.FromString,
                    response_serializer=business__pb2.FetchAllBusinessResponse.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=business__pb2.CreateBusinessRequest.FromString,
                    response_serializer=business__pb2.CreateBusinessResponse.SerializeToString,
            ),
            'FetchById': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchById,
                    request_deserializer=business__pb2.FetchBusinessByIdRequest.FromString,
                    response_serializer=business__pb2.FetchBusinessByIdResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=business__pb2.UpdateBusinessRequest.FromString,
                    response_serializer=business__pb2.UpdateBusinessResponse.SerializeToString,
            ),
            'DeleteById': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteById,
                    request_deserializer=business__pb2.DeleteBusinessRequest.FromString,
                    response_serializer=business__pb2.DeleteBusinessResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'business.BusinessService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BusinessService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FetchAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/business.BusinessService/FetchAll',
            business__pb2.FetchAllBusinessRequest.SerializeToString,
            business__pb2.FetchAllBusinessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/business.BusinessService/Create',
            business__pb2.CreateBusinessRequest.SerializeToString,
            business__pb2.CreateBusinessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/business.BusinessService/FetchById',
            business__pb2.FetchBusinessByIdRequest.SerializeToString,
            business__pb2.FetchBusinessByIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/business.BusinessService/Update',
            business__pb2.UpdateBusinessRequest.SerializeToString,
            business__pb2.UpdateBusinessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/business.BusinessService/DeleteById',
            business__pb2.DeleteBusinessRequest.SerializeToString,
            business__pb2.DeleteBusinessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
